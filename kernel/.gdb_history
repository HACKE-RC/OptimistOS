l
p entry->getAddress()
p entry->getFlag()
p entry->getFlag(Present)
p entry->getFlag(ReadWrite)
p entry->getFlag(NoExec)
p entry->getFlag(LargerPages)
ni
ni
ni
c
finish
finish
ni
ni
p *PML3
p *PML4
p *PML4x
p *PML4
ni
p *PML4
target remote :1234
ni
target remote :1234
b paging/paging.cpp:75
c
target remote :1234
target remote :1234
b paging.cpp:74
b paging.cpp:76
b paging.cpp:75
c
ni
si
ni
si
ni
si
target remote :1234
target remote :1234
b paging.cpp:62
c
bt
target remote :1234
target remote :1234
b paging.cpp:72
c
ni
ls
ls
target remote :1234
b paging.cpp:91
c
p PML4
p *PML4
p/x *PML4
p/x *PML4.entries 
p/x (*PML4).entries 
p/x (*PML4).entries[0].getAddress()
p/x *(PageTable*)(*PML4).entries[0].getAddress()
p/x (*(PageTable*)(*PML4).entries[0].getAddress()).entries
p/x (*(PageTable*)(*PML4).entries[1].getAddress()).entries
p/x (*(PageTable*)(*PML4).entries[1].getAddress())
p/x (*PML4).entries 
p/x (*(PageTable*)(*PML4).entries[255].getAddress()).entries
p/x (*(PageTable*)(*PML4).entries[256].getAddress()).entries
p/x (*(PageTable*)(*PML4).entries[257].getAddress()).entries
p/x (*(PageTable*)(*PML4).entries[511].getAddress()).entries
p/x (*(PageTable*)(*PML4).entries[0].getAddress()).entries
p/x (*(PageTable*)(*PML4).entries[0].getAddress()).entries[0]
p/x (*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress()
p/x *(*PageTable)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress())
p/x *(*PageTable)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress()))
p/x *(*PageTable)(*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress())
p/x *(*PageTable)(*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress()
p/x (*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress()
p/x (PageTable*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress())
p/x *(*PageTable)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress()))
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[0].getAddress())
p/x *(PageTable*)toVirtualAddr(void*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[0].getAddress())
p/x ((*(PageTable*)(*PML4).entries[0].getAddress()).entries[0].getAddress())
p/x ((*(PageTable*)(*PML4).entries[0].getAddress()).entries[0].getFile()())
p/x ((*(PageTable*)(*PML4).entries[0].getAddress()).entries[0].getFlag())
p/x ((*(PageTable*)(*PML4).entries[0].getAddress()).entries[0].getFlag(LargerPages))
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[2].getAddress())
p/x *(PageTable*)toVirtualAddr(void*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[2].getAddress())
p/x *(PageTable*)toVirtualAddr(void*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[1].getAddress())
p/x *(PageTable*)toVirtualAddr(void*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[2].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[2].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[0].getAddress()).entries[3].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[256].getAddress()).entries[0].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[256].getAddress()).entries[1].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[256].getAddress()).entries[2].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[256].getAddress()).entries[2].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[256].getAddress()).entries[3].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[256].getAddress()).entries[4].getAddress())
p/x *(PageTable*)((*(PageTable*)(*PML4).entries[256].getAddress()).entries[5].getAddress())
target remote :1234
target remote :1234
file kernel.elf 
b kernelEntry.cpp:21
c
p SDT
p/x SDT
p/x *SDT
target remote :1234
target remote :1234
c
p/x SDT
p/x *(XSDT*)SDT
p/x (*(XSDT*)SDT).signature
p/x (*(XSDT*)SDT).systemDescriptorTable.signature 
p/s (*(XSDT*)SDT).systemDescriptorTable.signature 
p/s (*(XSDT*)SDT).systemDescriptorTable.oemID 
p/x (*(XSDT*)SDT).systemDescriptorTable.signature 
x/2w (*(XSDT*)SDT).systemDescriptorTable.signature 
x/2s (*(XSDT*)SDT).systemDescriptorTable.signature 
x/3s (*(XSDT*)SDT).systemDescriptorTable.signature 
x/3s (*(rsdpInfo*)SDT).systemDescriptorTable.signature 
x/3s (*(rsdpInfo*)SDT)
x/3s (*(rsdpInfo*)SDT)
p (*(rsdpInfo*)SDT)
target remote :1234
target remote :1234
ls
b acpi.cpp:6
c
ni
p rsdpInfo
p rsdpInformation 
p *rsdpInformation 
ni
ni
p *rsdpInformation 
target remote :1234
b *acpiFindTable(char const*)
c
target remote :1234
c
ni
p name
ni
c
c
target remote :1234
c
target remote :1234
target remote :1234
c
ni
p rootRSDT 
ni
p rootRSDT 
target remote :1234
x/3s (*(rsdpInfo*)SDT).systemDescriptorTable.signature 
target remote :1234
c
ni
p rootRSDT 
p rootRSDT.systemDescriptorTable 
p rootRSDT.table 
p toVirtualAddr(void*)(rootRSDT.systemDescriptorTable)
p toVirtualAddr(void*)(rootRSDT)
p toVirtualAddr(void*)(rootRSDT).table
p (RSDT*)(toVirtualAddr(void*)(rootRSDT)).table
p (RSDT*)(toVirtualAddr(void*)(rootRSDT)).
l
ni
p (RSDT*)(toVirtualAddr(void*)(rootRSDT)).table 
p (*(RSDT*)(toVirtualAddr(void*)(rootRSDT))).table 
p (*(RSDT*)(toVirtualAddr(void*)(rootRSDT)))
target remote :1234
target remote :1234
c
ni
p rootRSDT 
ni
p *rsdt
ni
c
c
ni
p rsdt
p *rsdt
p (*rsdt).table 
ni
p entries
p rsdt->table 
p (uintptr_t*)rsdt->table 
ni
ni
p sdt
p *sdt
c
target remote :1234
c
ni
p sdt
p *sdt
ni
c
r
c
c
target remote :1234
c
ni
p entries
ni
ni
p *sdt
ni
ni
target remote :1234
target remote :1234
c
ni
p name
p sdt->signature 
p (char*)sdt->signature 
p st
p sdt
p *sdt
ni
p *sdt
p (*sdt+1_
p (*sdt+1)
p *(sdt+1)
p *(sdt+2)
p *(sdt+3)
p *(sdt+4)
p *(sdt+8)
p *(sdt+7)
p *(sdt+6)
c
target remote :1234
c
b memorycmp(void const*, void const*, unsigned long) 
ni
c
p s1
p *s1
p *(char*)s1
x/s s1
x/2s s1
x/2s s
x/s s2
nik
ni
ni
x/s p1
x/s p2
